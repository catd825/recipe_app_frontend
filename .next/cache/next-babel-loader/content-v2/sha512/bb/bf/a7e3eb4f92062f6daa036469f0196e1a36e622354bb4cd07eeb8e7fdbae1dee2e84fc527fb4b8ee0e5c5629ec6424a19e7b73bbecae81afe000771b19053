{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ShowPage = ({\n  recipe\n}) => {\n  console.log(recipe);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [recipe.title, recipe.description, recipe.description]\n  }, void 0, true);\n};\n\n_c = ShowPage;\nexport var __N_SSG = true;\nexport default ShowPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowPage\");","map":{"version":3,"sources":["/Users/catherineadonofrio/Development/code/Mod6/recipe_app/recipe_tracker_frontend/src/pages/[id].js"],"names":["ShowPage","recipe","console","log","title","description"],"mappings":";;;AA2BA,MAAMA,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,sBACI;AAAA,eACCA,MAAM,CAACG,KADR,EAECH,MAAM,CAACI,WAFR,EAGCJ,MAAM,CAACI,WAHR;AAAA,kBADJ;AAQH,CAVD;;KAAML,Q;;AAYN,eAAeA,QAAf","sourcesContent":["export const getStaticPaths = async () => {\n    const response = await fetch('http://localhost:3000/recipes')\n    const data = await response.json();\n\n    const paths = data.map(recipe => {\n        return {\n            params: { id: recipe.id.toString() }\n        }\n    })\n    return {\n        paths, // short for paths: paths\n        fallback: false // we can use this to redirect to 404 page when it exists\n    }\n}\n\nexport const getStaticProps = async (context) => {\n    const id = context.params.id; \n    const response = await fetch('http://localhost:3000/recipes/' + id)\n    const data = await response.json();\n\n    return {\n        props: { \n            recipe: data\n        }\n    }\n}\n\nconst ShowPage = ({recipe}) => {\n    console.log(recipe)\n    return (\n        <> \n        {recipe.title}\n        {recipe.description}\n        {recipe.description}\n            \n        </>\n    )\n}\n\nexport default ShowPage"]},"metadata":{},"sourceType":"module"}