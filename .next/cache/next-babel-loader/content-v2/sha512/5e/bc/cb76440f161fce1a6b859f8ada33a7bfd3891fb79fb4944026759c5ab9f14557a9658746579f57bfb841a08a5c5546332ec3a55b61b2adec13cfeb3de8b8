{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nconst UserContext = /*#__PURE__*/createContext(); //creates a store\n\nexport const UserProvider = ({\n  children\n}) => {\n  /*\n      const router = useRouter();\n  \n      const [user, setUser] = useState(false);\n      const userUrl = 'http://localhost:3000/api/v1/users';\n  \n        useEffect( () => {\n          const fetchUsers = async () => {\n              const response = await fetch(userUrl)\n              const data = await response.json();\n              setUser(data);\n          };\n          fetchUsers();\n        }, []);\n  \n        useEffect( () => {\n          const token = getToken()\n          if(token){\n            retrieveUser(token)\n          }\n        }, []);\n  \n        const getToken = () => {\n          return localStorage.getItem(\"token\")\n        }\n  \n        const retrieveUser = () => {\n          const token = getToken()\n          if (token) {\n            fetch(\"http://localhost:3000/api/v1/profile\", {\n              method: \"GET\",\n              headers: {Authorization: `Bearer ${token}`},\n            })\n            .then(response => response.json())\n            .then(data => {\n                setUser({user: data.user})}\n            )\n          } else {\n              router.push(\"/signup\")\n          }\n        }\n        const loginHandler = (userInfo) => {\n          // debugger\n          const configObj = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n            },\n            'body': JSON.stringify({user: userInfo})\n          }\n          console.log(configObj)\n          fetch(\"http://localhost:3000/api/v1/login\", configObj)\n          .then(response => response.json())\n          .then(data => {\n            localStorage.setItem(\"token\", data.jwt)\n            setUser({user: data.user}, () => router.push(\"/recipes\"))\n          })\n        }\n  \n      return (\n          <UserContext.Provider value={{ user, loginHandler }}>\n              {children}\n          </UserContext.Provider>\n      )\n      */\n};\n_c = UserProvider;\nexport const useUserContext = () => {\n  _s();\n\n  return useContext(UserContext);\n};\n\n_s(useUserContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/catherineadonofrio/Development/code/Mod6/recipe_app/recipe_tracker_frontend/src/UserContext/state.js"],"names":["createContext","useContext","useState","useEffect","useRouter","UserContext","UserProvider","children","useUserContext"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,SAA9C,QAA+D,OAA/D;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC,C,CAAqC;;AAErC,OAAO,MAAMM,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAnEM;KAAMD,Y;AAqEb,OAAO,MAAME,cAAc,GAAG,MAAM;AAAA;;AAChC,SAAOP,UAAU,CAACI,WAAD,CAAjB;AACH,CAFM;;GAAMG,c","sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nconst UserContext = createContext(); //creates a store\n\nexport const UserProvider = ({ children }) => {\n/*\n    const router = useRouter();\n\n    const [user, setUser] = useState(false);\n    const userUrl = 'http://localhost:3000/api/v1/users';\n\n      useEffect( () => {\n        const fetchUsers = async () => {\n            const response = await fetch(userUrl)\n            const data = await response.json();\n            setUser(data);\n        };\n        fetchUsers();\n      }, []);\n\n      useEffect( () => {\n        const token = getToken()\n        if(token){\n          retrieveUser(token)\n        }\n      }, []);\n\n      const getToken = () => {\n        return localStorage.getItem(\"token\")\n      }\n\n      const retrieveUser = () => {\n        const token = getToken()\n        if (token) {\n          fetch(\"http://localhost:3000/api/v1/profile\", {\n            method: \"GET\",\n            headers: {Authorization: `Bearer ${token}`},\n          })\n          .then(response => response.json())\n          .then(data => {\n              setUser({user: data.user})}\n          )\n        } else {\n            router.push(\"/signup\")\n        }\n      }\n      const loginHandler = (userInfo) => {\n        // debugger\n        const configObj = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n          },\n          'body': JSON.stringify({user: userInfo})\n        }\n        console.log(configObj)\n        fetch(\"http://localhost:3000/api/v1/login\", configObj)\n        .then(response => response.json())\n        .then(data => {\n          localStorage.setItem(\"token\", data.jwt)\n          setUser({user: data.user}, () => router.push(\"/recipes\"))\n        })\n      }\n\n    return (\n        <UserContext.Provider value={{ user, loginHandler }}>\n            {children}\n        </UserContext.Provider>\n    )\n    */\n}\n\nexport const useUserContext = () => {\n    return useContext(UserContext)\n}"]},"metadata":{},"sourceType":"module"}